CREATE DATABASE SEMINAR_STAGE
GO

USE SEMINAR_STAGE
GO

-- Check for the existence of tables
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[BRAND_STAGE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
  DROP TABLE [dbo].[BRAND_STAGE]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[PRODUCT_STAGE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
  DROP TABLE [dbo].[PRODUCT_STAGE]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[CATEGORY_STAGE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
  DROP TABLE [dbo].[CATEGORY_STAGE]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DIRECTORY_STAGE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
  DROP TABLE [dbo].[DIRECTORY_STAGE]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[STORE_STAGE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
  DROP TABLE [dbo].[STORE_STAGE]
GO


-- Create table
CREATE TABLE [dbo].[BRAND_STAGE] (
  [BrandID] INT NOT NULL,
  [BrandName] NVARCHAR(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  [CreateDay] DATETIME NULL,
  [UpdateDay] DATETIME NULL
)
ON [PRIMARY]
GO

CREATE TABLE [dbo].[PRODUCT_STAGE] (
  [ProductID] INT NOT NULL,
  [BrandID] INT NOT NULL,
  [CategoryID] INT NOT NULL,
  [StoreID] INT NOT NULL,
  [DanhmucID] INT NOT NULL,
  [ProductName] NVARCHAR(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  [ShortDescription] NVARCHAR(4000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  [Price] INT NULL,
  [OriginalPrice] INT NULL,
  [Discount] INT NULL,
  [DiscountRate] INT NULL,
  [QuantitySold] INT NULL,
  [Rating] FLOAT NULL,
  [ReviewCount] INT NULL,
  [CreateDay] DATETIME NULL,
  [UpdateDay] DATETIME NULL
)
ON [PRIMARY]
GO

CREATE TABLE [dbo].[CATEGORY_STAGE] (
  [CategoryID] INT NOT NULL,
  [CategoryName] NVARCHAR(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  [CreateDay] DATETIME NULL,
  [UpdateDay] DATETIME NULL
)
ON [PRIMARY]
GO

CREATE TABLE [dbo].[DIRECTORY_STAGE] (
  [DirectoryID] INT NOT NULL,
  [DirectoryName] NVARCHAR(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  [CreateDay] DATETIME NULL,
  [UpdateDay] DATETIME NULL
)
ON [PRIMARY]
GO

CREATE TABLE [dbo].[STORE_STAGE] (
  [StoreID] INT NOT NULL,
  [StoreName] NVARCHAR(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  [StoreOfficial] NVARCHAR(100) NULL,
  [StoreAVGRating] FLOAT NULL,
  [StoreReviewCount] INT NULL,
  [StoreTotalFollower] INT NULL,
  [CreateDay] DATETIME NULL,
  [UpdateDay] DATETIME NULL
)
ON [PRIMARY]
GO
-- Definition for indices :
ALTER TABLE [dbo].[BRAND_STAGE]
ADD CONSTRAINT [PK_BRAND] 
PRIMARY KEY CLUSTERED ([BrandID])
WITH (
  PAD_INDEX = OFF,
  IGNORE_DUP_KEY = OFF,
  STATISTICS_NORECOMPUTE = OFF,
  ALLOW_ROW_LOCKS = ON,
  ALLOW_PAGE_LOCKS = ON)
ON [PRIMARY]
GO

ALTER TABLE [dbo].[PRODUCT_STAGE]
ADD CONSTRAINT [PK_PRODUCT] 
PRIMARY KEY CLUSTERED ([ProductID])
WITH (
  PAD_INDEX = OFF,
  IGNORE_DUP_KEY = OFF,
  STATISTICS_NORECOMPUTE = OFF,
  ALLOW_ROW_LOCKS = ON,
  ALLOW_PAGE_LOCKS = ON)
ON [PRIMARY]
GO

ALTER TABLE [dbo].[CATEGORY_STAGE]
ADD CONSTRAINT [PK_CATEGORY] 
PRIMARY KEY CLUSTERED ([CategoryID])
WITH (
  PAD_INDEX = OFF,
  IGNORE_DUP_KEY = OFF,
  STATISTICS_NORECOMPUTE = OFF,
  ALLOW_ROW_LOCKS = ON,
  ALLOW_PAGE_LOCKS = ON)
ON [PRIMARY]
GO


ALTER TABLE [dbo].[DIRECTORY_STAGE]
ADD CONSTRAINT [PK_DIRECTORY] 
PRIMARY KEY CLUSTERED ([DirectoryID])
WITH (
  PAD_INDEX = OFF,
  IGNORE_DUP_KEY = OFF,
  STATISTICS_NORECOMPUTE = OFF,
  ALLOW_ROW_LOCKS = ON,
  ALLOW_PAGE_LOCKS = ON)
ON [PRIMARY]
GO

ALTER TABLE [dbo].[STORE_STAGE]
ADD CONSTRAINT [PK_STORE] 
PRIMARY KEY CLUSTERED ([StoreID])
WITH (
  PAD_INDEX = OFF,
  IGNORE_DUP_KEY = OFF,
  STATISTICS_NORECOMPUTE = OFF,
  ALLOW_ROW_LOCKS = ON,
  ALLOW_PAGE_LOCKS = ON)
ON [PRIMARY]
GO

-- Create trigger
--BRAND
CREATE TRIGGER UPDATE_BRANDSTAGE ON [dbo].[BRAND_STAGE] AFTER UPDATE
AS 
BEGIN
	UPDATE [dbo].[BRAND_STAGE]
	SET UpdateDay = GETDATE()
	WHERE BrandID IN (SELECT DISTINCT BrandID FROM inserted)
END
GO
CREATE TRIGGER INSERT_BRANDSTAGE ON [dbo].[BRAND_STAGE] AFTER INSERT
AS
BEGIN
	UPDATE [dbo].[BRAND_STAGE]
	SET CreateDay = GETDATE(), UpdateDay = GETDATE()
	WHERE BrandID IN (SELECT DISTINCT BrandID FROM inserted)
END
go
--PRODUCT
CREATE TRIGGER UPDATE_PRODUCTSTAGE ON [dbo].[PRODUCT_STAGE] AFTER UPDATE
AS 
BEGIN
	UPDATE [dbo].[PRODUCT_STAGE]
	SET UpdateDay = GETDATE()
	WHERE ProductID IN (SELECT DISTINCT ProductID FROM inserted)
END
GO
CREATE TRIGGER INSERT_PRODUCTSTAGE ON [dbo].[PRODUCT_STAGE] AFTER INSERT
AS
BEGIN
	UPDATE [dbo].[PRODUCT_STAGE]
	SET CreateDay = GETDATE(), UpdateDay = GETDATE()
	WHERE ProductID IN (SELECT DISTINCT ProductID FROM inserted)
END
go
--CATEGORY
CREATE TRIGGER UPDATE_CATEGORYSTAGE ON [dbo].[CATEGORY_STAGE] AFTER UPDATE
AS 
BEGIN
	UPDATE [dbo].[CATEGORY_STAGE]
	SET UpdateDay = GETDATE()
	WHERE CategoryID IN (SELECT DISTINCT CategoryID FROM inserted)
END
GO
CREATE TRIGGER INSERT_CATEGORYSTAGE ON [dbo].[CATEGORY_STAGE] AFTER INSERT
AS
BEGIN
	UPDATE [dbo].[CATEGORY_STAGE]
	SET CreateDay = GETDATE(), UpdateDay = GETDATE()
	WHERE CategoryID IN (SELECT DISTINCT CategoryID FROM inserted)
END
go
--DIRECTORY
CREATE TRIGGER UPDATE_DIRECTORYSTAGE ON [dbo].[DIRECTORY_STAGE] AFTER UPDATE
AS 
BEGIN
	UPDATE [dbo].[DIRECTORY_STAGE]
	SET UpdateDay = GETDATE()
	WHERE DirectoryID IN (SELECT DISTINCT DirectoryID FROM inserted)
END
GO
CREATE TRIGGER INSERT_DIRECTORYSTAGE ON [dbo].[DIRECTORY_STAGE] AFTER INSERT
AS
BEGIN
	UPDATE [dbo].[DIRECTORY_STAGE]
	SET CreateDay = GETDATE(), UpdateDay = GETDATE()
	WHERE DirectoryID IN (SELECT DISTINCT DirectoryID FROM inserted)
END
go
--STORE
CREATE TRIGGER UPDATE_STORESTAGE ON [dbo].[STORE_STAGE] AFTER UPDATE
AS 
BEGIN
	UPDATE [dbo].[STORE_STAGE]
	SET UpdateDay = GETDATE()
	WHERE StoreID IN (SELECT DISTINCT StoreID FROM inserted)
END
GO
CREATE TRIGGER INSERT_STORESTAGE ON [dbo].[STORE_STAGE] AFTER INSERT
AS
BEGIN
	UPDATE [dbo].[STORE_STAGE]
	SET CreateDay = GETDATE(), UpdateDay = GETDATE()
	WHERE StoreID IN (SELECT DISTINCT StoreID FROM inserted)
END
go


select * from BRAND_STAGE
select * from CATEGORY_STAGE
select * from DIRECTORY_STAGE
select * from STORE_STAGE
select * from PRODUCT_STAGE

truncate table BRAND_STAGE
truncate table PRODUCT_STAGE
truncate table CATEGORY_STAGE
truncate table DIRECTORY_STAGE
truncate table STORE_STAGE
